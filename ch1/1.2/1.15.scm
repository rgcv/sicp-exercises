; 1.15 The sine of an angle (specified in radians) can be computed by making use
; of the approximation sin(x) ≈ x if x is sufficiently small, and the
; trigonometric identity
;
;   sin(x) = 3sin(x/3) - 4sin³(x/3)
;
; to reduce the size of the argument of sin.  (For purposes of this exercise an
; angle is considered "sufficiently small" if its magnitude is not greater than
; 0.1 radians.)  These ideas are incorporated in the following procedures:

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

; a. How many times is the procedure `p` applied when `(sine 12.15)` is
; evaluated?

(sine 12.15)
(p (sine (/ 12.15 3.0)))
(p (sine 4.05))
(p (p (sine (/ 4.05 3.0))))
(p (p (sine 1.35)))
(p (p (p (sine (/ 1.35 3.0)))))
(p (p (p (sine 0.45))))
(p (p (p (p (sine (/ 0.45 3.0))))))
(p (p (p (p (sine 0.15)))))
(p (p (p (p (p (sine (/ 0.15 3.0)))))))
(p (p (p (p (p (sine 0.05)))))) ; A: 5 times
(p (p (p (p (p 0.05)))))
; ...
-0.39980345741334

; In general, we must divide the angle `a` by 3ⁿ, i.e. divide `a` by 3 n times
; until its absolute value is not greater than 0.1 radians.  Therefore, the
; following inequality must hold:
;
;   a/3ⁿ < 0.1 .
;
; Solving for n,
;
;     a/3ⁿ < 0.1
; ⇒ 10a/3ⁿ < 1
; ⇒     3ⁿ > 10a
; ⇒      n > log₃(10a)

; b. What is the order of growth in space and number of steps (as a function of
; a) used by the process generated by the `sine` procedure when `(sine a)` is
; evaluated?

; A: Specifically, Θ(log₃(10a)).  Since logₙ(a) ∝ logₖ(a), where n ≠ k, one can
; describe the computational complexity in terms of the natural logarithm
; instead of the logarithm of base 3.  This is possible because we can change a
; logarithm's base leveraging the following property:
;
;   logₙ(a) = logₖ(a) / logₖ(n) ⇒ logₖ(a) = logₙ(a) logₖ(n) .
;
; With n = 3, and k = e, we can trivilaly determine log(3) is constant,
; simplifying the computational complexity using big O notation instead,
; describing it as O(log(10a)).  Moreover, since 10 is constant as well, we can
; further simplify the computational complexity, describing it simply as
; O(log(a)).
